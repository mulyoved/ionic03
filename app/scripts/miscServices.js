'use strict';

angular.module('Ionic03.MiscServices', [])

.service('MiscServices', function(GoogleApp, $timeout, ConfigService, $q, $log) {
    var service = {
        formatImageUrl: function(url) {
            if (url.startsWith('https://')) {
                url = 'http:' + url.substring(6);
            }

            var text = '<div class="separator" style="clear: both; text-align: center;">' +
                '<a href="' + url + '" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="' +
                url + '" /></a></div>';

            return text;
        },
        uploadImage: function (imageURI) {
            var deferred = $q.defer();
            if (typeof FileTransfer != 'undefined') {
                console.log('uploadImage', imageURI);

                var ft = new FileTransfer();
                var options = new FileUploadOptions();

                var useServer = true;
                var server;

                if (useServer) {
                    options.fileKey = "file";
                    options.fileName = 'filename.jpg'; // We will use the name auto-generated by Node at the server side.
                    options.mimeType = "image/jpeg";
                    options.chunkedMode = false;
                    options.params = { // Whatever you populate options.params with, will be available in req.body at the server-side.
                        description: "Uploaded from my phone",
                        token: GoogleApp.oauthToken.access_token,
                        bloggerId: ConfigService.blogId,            // not used for now, server should use it later
                        blogName: ConfigService.blogName,         // not used for now, server should use it later to create album
                        albumId: ConfigService.albumId,
                        userId: 'default' //https://developers.google.com/picasa-web/faq_gdata#using_default
                    };
                    server = ConfigService.imageUploadServerURL + "/images";
                }
                else { /* not working, return not image, hard to tell why */
                    var userId = 'default';
                    var albumId = ConfigService.albumId;

                    options.fileKey = "file";
                    options.fileName = 'filename.jpg'; // We will use the name auto-generated by Node at the server side.
                    options.mimeType = "image/jpeg";
                    options.chunkedMode = false;

                    server = 'https://picasaweb.google.com/data/feed/api/user/' + userId + '/albumid/' + albumId;

                    var token = GoogleApp.oauthToken.access_token;
                    options.headers = {
                        'GData-Version': '2',
                        'Authorization': 'Bearer' + ' ' + token,
                        "Content-Type": 'image/jpeg',
                        //'Content-Length':data.length,
                        "MIME-version": "1.0"};
                }

                console.log('upload options:', options);
                console.log('upload serverURL: [' + ConfigService.imageUploadServerURL + ']');
                ft.upload(imageURI, server,
                    function (e) {
                        var response = angular.fromJson(e.response);
                        var imageUrl = response.entry['media:group'][0]['media:content'][0].$.url;
                        console.log('uploadImage:Answer', imageUrl);

                        deferred.resolve(imageUrl);
                        //callback(null, imageUrl);
                        //imageUrl;
                    },
                    function (err) {
                        console.error('uploadImage:Failed: ', err);
                        //alert("Upload failed");
                        //callback(err, null);
                        deferred.reject(err);
                    }, options);
            }
            else {
                if (imageURI.startsWith('file://error_')) {
                    $log.log('Failed to uploaded image', imageURI);
                    deferred.reject('Failed to upload image');
                }
                else if (imageURI.startsWith('file://')) {
                    $log.log('Uploaded image', imageURI);
                    var url = 'http://' + imageURI.substring(7);
                    deferred.resolve(url);
                }
            }

            return deferred.promise;
        },
        cameraPicture: function (sourceType) {
            ConfigService.tempDisableUnlock = 1; // when switch to camera we get device pause, so need to unlock
            var deferred = $q.defer();

            if (typeof Camera != 'undefined') {
                var options = {
                    quality: 45,
                    targetWidth: 1000,
                    targetHeight: 1000,
                    destinationType: Camera.DestinationType.FILE_URI,
                    encodingType: Camera.EncodingType.JPEG,
                    sourceType: sourceType // Camera.PictureSourceType.CAMERA
                };

                navigator.camera.getPicture(
                    function (imageURI) {
                        $log.log(imageURI);
                        $log.log('Got image URI from camera plugin' + new Date().getTime());
                        deferred.resolve(imageURI);
                    },
                    function (message) {
                        // We typically get here because the use canceled the photo operation. Fail silently.
                        deferred.resolve(null);
                    }, options);
            }
            else {
                deferred.resolve('file://3.bp.blogspot.com/-c_ivgAYzRq8/U16rU6EoH7I/AAAAAAAAKAk/LClVJEFIBHs/s1600/4-28-2014+10-25-31+PM.png');
            }

            return deferred.promise;
        }
    };

    return service;
});
